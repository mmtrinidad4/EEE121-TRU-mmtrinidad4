#include <cstdlib>
#include <sstream> 
#include <iostream> 
#include <vector>
#include <ctime>
#include <algorithm> // for sorting
using namespace std; 

// Function to print CSV format
void CSVprint(const vector<string>& car){
    for(const string& value : car) {
        cout << value << ",";
    }
    cout << endl;
}

// Function to convert date
string ConvertDate(string month, string day, string yr){   
    string month_num;
    if(month == "Jan"){month_num = "01";} else if(month == "Feb"){month_num = "02";} else if(month == "Mar"){month_num = "03";}
    else if(month == "Apr"){month_num = "04";} else if(month == "May"){month_num = "05";} else if(month == "Jun"){month_num = "06";}
    else if(month == "Jul"){month_num = "07";} else if(month == "Aug"){month_num = "08";} else if(month == "Sep"){month_num = "09";}
    else if(month == "Oct"){month_num = "10";} else if(month == "Nov"){month_num = "11";} else if(month == "Dec"){month_num = "12";}
    
    string day_2digit = (stoi(day) < 10) ? "0" + day : day;
    string yr_2digit = to_string(stoi(yr) - 2000);
        
    return month_num + "/" + day_2digit + "/" + yr_2digit;
}

// Binary search function
int binarySearch(const vector<vector<string>>& cars, const string& plate, bool logIterations = true) {
    int low = 0;
    int high = cars.size() - 1;
    int mid;

    while (low <= high) {
        mid = (low + high) / 2;
        if(logIterations)
            cout << "MID-" << mid << endl; // Log current MID value

        if (cars[mid][0] == plate) {
            return mid; // Plate found
        } else if (cars[mid][0] < plate) {
            low = mid + 1; // Search the right half
        } else {
            high = mid - 1; // Search the left half
        }
    }

    return -1; // Plate not found
}

// Sorting function with suppression of output
void bubbleSortSuppressOutput(vector<vector<string>>& cars) {
    int n = cars.size();
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (cars[j][0] > cars[j + 1][0]) {
                swap(cars[j], cars[j + 1]);
            }
        }
    }
}

int main(){ 
    string command;
    string argmt;
    vector<string> syntax;
    int indx;
    string time_element;
    vector<string> time_string;
    vector<vector<string>> cars_parked;
    vector<vector<string>> car_log;
    bool bsort_called = false;
 
    while(true){
        int curSize = cars_parked.size();
        int logSize = car_log.size();
        string y = "";

        syntax.clear();
        cout << "> "; 
        getline(cin, command);
        cout << command << endl;
        stringstream parse(command);
        indx = 0;
        while(parse >> argmt){
            syntax.push_back(argmt);
            indx+=1;
        }
        for(indx; indx <= 5; indx+=1){
            syntax.push_back("_");
        }
        
        time_string.clear();
        time_t current_time = time(0);
        char* time_log = ctime(&current_time);
        stringstream split(time_log);
        while(split >> time_element){
            time_string.push_back(time_element);
        }

        // PARK command
        if(syntax[0] == "PARK" && syntax[1] != "_" && syntax[2] != "_" && syntax[3] != "_" && syntax[4] != "_" && syntax[5] == "_"){
            if(curSize <= 500){
                vector<string> car(10);        
                string entryTime = time_string[3]; 
                string day = time_string[0];
                string date = ConvertDate(time_string[1], time_string[2], time_string[4]);
                car = {syntax[1], entryTime, "NONE", "0", "P0", day, date, syntax[2], syntax[3], syntax[4]};
                cars_parked.push_back(car);
                cout << "\n";
            }
            else{
                cout << "\nUNSUPPORTED COMMAND\n\n";
            }
        }

        // BFIND command
        else if(syntax[0] == "BFIND" && syntax[1] != "_" && syntax[2] == "_"){
            int foundIndex = binarySearch(cars_parked, syntax[1]);
            if(foundIndex != -1) {
                CSVprint(cars_parked[foundIndex]);
            } else {
                cout << "CAR NOT FOUND\n";
            }
            cout << "\n";
        }

        // LIST command
        else if(syntax[0] == "LIST" && syntax[1] == "_"){
            if(curSize != 0){
                cout << "\n";
                if (bsort_called) {
                    bubbleSortSuppressOutput(cars_parked);
                }
                for(int x = 0; x < curSize; x+=1){
                    CSVprint(cars_parked[x]);
                }
                cout << "\n";
            }
            else{
                cout << "\nUNSUPPORTED COMMAND\n\n";
            }
        }

        // Other commands...

        // BSORT command
        else if (syntax[0] == "BSORT" && syntax[1] == "_"){
            if(curSize != 0){
                bubbleSortSuppressOutput(cars_parked);
                cout << "\n";
                for(int x = 0; x < curSize; x+=1){
                    cout << "ITER-1 : ";
                    CSVprint(cars_parked[x]);
                }
                cout << "\n";
                bsort_called = true;
            }
            else{
                cout << "\nUNSUPPORTED COMMAND\n\n";
            }
        } 

        // Quit command
        else if(syntax[0] == "QUIT" && syntax[1] == "_"){
            break;
        }
        
        else{
            cout << "\nUNSUPPORTED COMMAND\n\n";
        }
    }

    return 0;
}

